# 参考 http://www.manongjc.com/article/98012.html
# 场景：根据 group_id 字段进行分库，所有库中的表名、字段都相同
### mysql 默认配置 ###
default-conf:
  minIdle: 5 # 连接池闲置连接最小数量
  #maxIdle: 100 # 连接池闲置连接最大数量
  timeBetweenEvictionRunsMillis: 60000 # 检测连接的间隔时间 %testWhileIdle%的判断依据(见下方对应配置项)
  minEvictableIdleTimeMillis: 300000 # 连接保持空闲而不被驱逐的最长时间 单位毫秒
  initialSize: 5 # 连接池初始大小
  maxWait: 60000 # 获取连接时最大等待时间 单位毫秒。
  maxActive: 20 # 最大连接数
  validationQuery: SELECT 1 # 数据库连接状态检测语句 %testWhileIdle%的检测语句(见下方对应配置项)
  testWhileIdle: true # 申请连接的时候检测 如果空闲时间大于%timeBetweenEvictionRunsMillis% 执行%validationQuery%检测连接是否有效（见上方对应配置）
  testOnBorrow: false # 申请连接时执行validationQuery检测连接是否有效 配置为true会降低性能
  testOnReturn: false # 归还连接时执行validationQuery检测连接是否有效 配置为true会降低性能
  filters: stat,wall,logback # 监控统计filter:stat 防御sql注入filter:wall 日志filter:logback
  logSlowSql: true # 是否启用慢日志
  merge-sql: true # 是否合并日志
  slow-sql-millis: 1000 # 慢日志查询时间标准
### 结束 ###

# 数据连接池相关配置
sharding:
  jdbc:
    datasource:
      # 分库1
      partsd001:
        password:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url:
        username: root
        minIdle: ${default-conf.minIdle}
        ##maxIdle : ${default-conf.#maxIdle}
        initialSize: ${default-conf.initialSize}
        timeBetweenEvictionRunsMillis: ${default-conf.timeBetweenEvictionRunsMillis}
        minEvictableIdleTimeMillis: ${default-conf.minEvictableIdleTimeMillis}
        maxWait: ${default-conf.maxWait}
        maxActive: ${default-conf.maxActive}
        validationQuery: ${default-conf.validationQuery}
        testWhileIdle: ${default-conf.testWhileIdle}
        testOnBorrow: ${default-conf.testOnBorrow}
        testOnReturn: ${default-conf.testOnReturn}
        filters: ${default-conf.filters}
        logSlowSql: ${default-conf.logSlowSql}
        merge-sql: ${default-conf.merge-sql}
        slow-sql-millis: ${default-conf.slow-sql-millis}
      # 分库2
      partsd002:
        省略...
      # 分库3
      partsd003:
        省略...
      # 分库4
      partsd004:
        省略...
      # 分库5
      partsd005:
        省略...
      # 总库
      partsa001:
        省略...
      names: partsa001,partsd001,partsd002,partsd003,partsd004,partsd005

    config:
      props:
        sql:
          show: true
      sharding:
        tables: # 多个表就写多个,此处省略
          # 表名1
          parts_ticket:
            table-strategy:
              inline:
                # 分表字段
                sharding-column: dealer_group_id
                algorithm-expression: parts_ticket
            # 数据节点，如果我的 dealer_group_id 是a001 那么会分配到a001下的parts_ticket表中
            actual-data-nodes: parts$->{['a001','d001','d002','d003','d004','d005']}.parts_ticket
            # 主键列及生成方式
            key-generator-column-name: id
            key-generator-class-name: io.shardingsphere.core.keygen.DefaultKeyGenerator
          # 表名2
          parts_ticket_use:
            table-strategy:
              inline:
                # 分表字段
                sharding-column: dealer_group_id
                algorithm-expression: parts_ticket_use
              # 数据节点，如果我的 dealer_group_id 是a001 那么会分配到a001下的parts_ticket表中
              actual-data-nodes: parts$->{['a001','d001','d002','d003','d004','d005']}.parts_ticket_use
              # 主键列及生成方式
              key-generator-column-name: id
              key-generator-class-name: io.shardingsphere.core.keygen.DefaultKeyGenerator
        # 默认数据源  没有指定分库字段的就走默认数据源
        default-data-source-name: partsa001
        #默认分库规则
        default-database-strategy:
          inline:
            sharding-column: dealer_group_id
            algorithm-expression:  parts$->{dealer_group_id}

mybatis:
  configuration:
    map-underscore-to-camel-case: true #开启Mybatis的驼峰转换

mybatis-plus:
  global-config:
    db-config:
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)